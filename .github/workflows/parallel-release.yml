name: 并行发布流程

on:
  push:
    tags: ['v*']  # push v1.2.3 等标签触发
  workflow_dispatch:  # 手动触发
    inputs:
      version:
        description: 'Version to release (e.g. 1.2.3)'
        required: true
        default: '1.0.0'
  release:
    types: [published]  # 当创建新的GitHub Release时触发

env:
  GO_VERSION: '1.22'
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/rawbox

jobs:
  # 交叉编译二进制文件
  build-binaries:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 获取版本号
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then 
            VERSION="${{ github.event.inputs.version }}"
          else 
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version is: $VERSION"

      - name: 创建输出目录
        run: mkdir -p bin

      - name: 交叉编译 amd64 架构
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o bin/rawbox-linux-amd64

      - name: 交叉编译 arm64 架构
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o bin/rawbox-linux-arm64

      - name: 验证二进制文件
        run: |
          ls -la bin/
          file bin/rawbox-linux-amd64
          file bin/rawbox-linux-arm64

      - name: 上传二进制文件构件
        uses: actions/upload-artifact@v4
        with:
          name: rawbox-binaries
          path: bin/*
          if-no-files-found: error
          retention-days: 1

  # 构建归档文件
  build-archive:
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - name: 获取版本号
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then 
            VERSION="${{ github.event.inputs.version }}"
          else 
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version is: $VERSION"

      - name: 下载二进制文件构件
        uses: actions/download-artifact@v4
        with:
          name: rawbox-binaries

      - name: 验证下载的文件
        run: ls -la

      - name: 检出代码以获取 README.md
        uses: actions/checkout@v4

      - name: 创建 ZIP 归档文件
        run: |
          ls -la
          zip -j rawbox-${{ env.VERSION }}.zip rawbox-linux-amd64 rawbox-linux-arm64 README.md

      - name: 验证 ZIP 文件
        run: ls -la rawbox-${{ env.VERSION }}.zip

      - name: 上传 ZIP 归档文件构件
        uses: actions/upload-artifact@v4
        with:
          name: rawbox-zip
          path: rawbox-${{ env.VERSION }}.zip
          if-no-files-found: error
          retention-days: 1

  # 生成变更日志
  gen-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本号
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then 
            VERSION="${{ github.event.inputs.version }}"
          else 
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version is: $VERSION"

      - name: 获取上一个标签
        run: |
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: 生成变更日志
        run: |
          if [ -f "CHANGELOG.md" ] && grep -q "## \[${VERSION#\v}\]" CHANGELOG.md; then
            # 提取 CHANGELOG.md 中对应版本的部分
            sed -n '/## \['"${VERSION#\v}"'\]/,/^## /p' CHANGELOG.md | sed '$d' > release_notes.md
          else
            # 使用 git log 生成变更日志
            if [ -n "$PREV_TAG" ]; then
              echo "### 更新内容" > release_notes.md
              git log --pretty=format:"- %s" $PREV_TAG..HEAD >> release_notes.md
            else
              echo "### 更新内容" > release_notes.md
              git log --pretty=format:"- %s" -10 >> release_notes.md
            fi
          fi

      - name: 验证变更日志
        run: cat release_notes.md

      - name: 上传变更日志构件
        uses: actions/upload-artifact@v4
        with:
          name: rawbox-notes
          path: release_notes.md
          if-no-files-found: error
          retention-days: 1

  # 发布到 Docker Hub
  dockerhub-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本号
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then 
            VERSION="${{ github.event.inputs.version }}"
          else 
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version is: $VERSION"

      - name: 设置 Docker QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 提取镜像元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=ref,event=tag

      - name: 显示生成的标签
        run: |
          echo "Tags generated:"
          echo "${{ steps.meta.outputs.tags }}"

      - name: 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 保存镜像标签信息
        run: |
          echo "Generated tags:" > dockerhub_image.txt
          echo "${{ steps.meta.outputs.tags }}" >> dockerhub_image.txt

      - name: 验证镜像标签信息
        run: cat dockerhub_image.txt

      - name: 上传 Docker Hub 元数据构件
        uses: actions/upload-artifact@v4
        with:
          name: dockerhub-meta
          path: dockerhub_image.txt
          if-no-files-found: error
          retention-days: 1

  # 创建 GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-archive, gen-changelog, dockerhub-publish]
    permissions:
      contents: write
    steps:
      - name: 获取版本号
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then 
            VERSION="${{ github.event.inputs.version }}"
          else 
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version is: $VERSION"

      - name: 下载所有构件
        uses: actions/download-artifact@v4

      - name: 验证下载的构件
        run: ls -la

      - name: 合并发布信息
        run: |
          # 将 Docker 镜像信息追加到发布说明末尾
          echo "" >> rawbox-notes/release_notes.md
          echo "### Docker 镜像" >> rawbox-notes/release_notes.md
          cat dockerhub-meta/dockerhub_image.txt >> rawbox-notes/release_notes.md
          cp rawbox-notes/release_notes.md .

      - name: 验证发布信息
        run: cat release_notes.md

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: RawBox ${{ env.VERSION }}
          body_path: release_notes.md
          files: rawbox-${{ env.VERSION }}.zip
          prerelease: ${{ contains(github.ref, '-') }}
          draft: false